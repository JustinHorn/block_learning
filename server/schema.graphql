type Query {
  hello: String!
  feed(skip: Int, take: Int, orderBy: ResourceOrderByInput): [Resource!]!
  authorize: User
}

input ResourceOrderByInput {
  id: Sort
  title: Sort
  href: Sort
  date: Sort
}

enum Sort {
  asc
  desc
}

type Mutation {
  login(email: String!, password: String!): AuthPayLoad
  register(name: String!, email: String!, password: String!): AuthPayLoad

  addResource(
    title: String!
    href: String!
    tags: [String!]!
    imgUrl: String
    github: String
  ): Resource

  updateResource(
    id: Int!
    title: String
    tags: [String!]
    github: String
    imgUrl: String
  ): Resource

  deleteResource(id: Int!): DeletedResource
}

type AuthPayLoad {
  token: String!
  user: User!
}

type User {
  id: Int!
  name: String!
  email: String!
  posts: [Resource!]!
}

type DeletedResource {
  id: Int!
  title: String!
  href: String!
  postedBy: User
  date: String!
  github: String!
  imgUrl: String!
}

type Resource {
  id: Int!
  title: String!
  imgUrl: String!
  github: String!
  href: String!
  tags: [Tag!]!
  date: String!
  postedBy: User
}

type Tag {
  id: Int!
  name: String!
  resources: [Resource!]!
}
